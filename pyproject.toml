[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "care-ml"
version = "0.0.0"
description = "care-ml"
authors = [
  {name = "Signe Kirk Brødbæk", email = "signebroedbaek@gmail.com"},
  {name = "Sara Kolding", email = "sarakolding@live.dk"}
]
classifiers = [
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10"
]
requires-python = ">=3.9"
dependencies = [
  "pandas>=1.4.0,<2.1.0",
  "scikit-learn>=1.1.1,<1.3.0",
  "xgboost>=1.6.1,<1.8.0",
  "hydra-core>=1.1.13,<1.4.0",
  "matplotlib>=3.5.2,<3.8.0",
  "wandb==0.13.10",
  "tabulate>=0.8.10,<0.10.0",
  "optuna>=2.10.1,<3.2.0",
  "hydra-optuna-sweeper>=1.2.0,<1.3.0",
  "hydra-joblib-launcher>=1.2.0, <1.3.0",
  "pyarrow>=9.0.0",
  "Random-Word>=1.0.11, <=1.0.12",
  "psycopmlutils",
  "Levenshtein>=0.20.0, <0.22.0",
  "wasabi>=0.9.1",
  "scikit-learn>=1.1.2",
  "deepchecks>=0.8.0",
  "dill>=0.3.0",
  "SQLAlchemy>=1.4.41, <2.0.16",
  "pyodbc>=4.0.34, <4.0.40",
  "pydantic>=1.9.0",
  "psutil>=5.9.1, <6.0.0",
  "catalogue>=2.0.0",
  "numpy>=1.23.3",
  "protobuf<=3.20.3", # Other versions give errors with pytest, super weird!
  "plotnine==0.10.1",
  "timeseriesflattener",
  "scipy==1.10.1",
  "polars==0.17.15",
  "tableone",
  "shap",
  "typing_extensions==4.6.2", # Pins the typing extension due to a bug a buggy interaction with pydantic and Literal, see https://github.com/SeldonIO/alibi/issues/927 and https://github.com/pydantic/pydantic/issues/545
  "patchworklib==0.6.1"
]

[project.license]
file = "LICENSE"
name = "MIT"

[project.optional-dependencies]
dev = [
  "cruft",
  "black",
  "pre-commit==2.20.0,<2.21.0",
  "ruff==0.0.254", # important that these match the pre-commit hooks
  "black==22.8.0", # important that these match the pre-commit hooks
  "black[jupyter]==22.8.0",
  "pandas-stubs",
  "invoke"
]
type = [
  "pyright",
  "pyright-polite"
]
tests = [
  "pytest>=7.1.3,<7.3.0",
  "pytest-cov>=3.0.0,<3.1.0",
  "pytest-xdist>=3.0.0,<3.2.0",
  "pytest-sugar>=0.9.4,<0.10.0",
  "tox"
]
src = [
  "psycop @ git+https://github.com/Aarhus-Psychiatry-Research/psycop-common.git@v0.77.1"
]

[project.urls]
homepage = "https://github.com/Aarhus-Psychiatry-Research/care-ml"
repository = "https://github.com/Aarhus-Psychiatry-Research/care-ml"
documentation = "https://Aarhus-Psychiatry-Research.github.io/care-ml/"

[tool.coverage.run]
omit = [
  "**/tests/*",
  "**/_vendorized/*",
  "**/about.py"
]

exclude_lines = [
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __unicode__",
  "def __repr__",
  "if self.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:"
]

[tool.pyright]
exclude = [".*venv*", ".tox", "src/psycop", "build"]
pythonPlatform = "Darwin"

[tool.pytest.ini_options]
markers = [
  "pre_push_test: Tests run on push. Should be as minimal as possible to maintain fast push speeds."
]
pythonpath = [
  "."
]

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "C4",
  "COM",
  "D417",
  "E",
  "ERA",
  "F",
  "I",
  "ICN",
  "NPY001",
  "PD002",
  "PIE",
  "PLE",
  "PLW",
  "PT",
  "UP",
  "Q",
  "PTH",
  "RSE",
  "RET",
  "RUF",
  "SIM",
  "W"
]
ignore = [
  "ANN101",
  "ANN401",
  "E402",
  "E501",
  "F401",
  "F841",
  "RET504"
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = ["ERA"]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "__init__.py",
  "docs/conf.py"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py39"

[tool.ruff.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.isort]
known-third-party = ["wandb"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.semantic_release]
branch = "main"
version_variable = [
  "pyproject.toml:version"
]
upload_to_pypi = false
upload_to_release = true
build_command = "python -m pip install build; python -m build"

[tool.setuptools]
include-package-data = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{39,310}
[testenv:{test,type}]
extras = tests, dev, src, type
use_develop = true
commands =
  test: pytest src/care_ml -n auto {posargs:test}
  type: pyright src/care_ml
  
[testenv:docs]
description: build docs
extras = docs
basepython = py39 # Setting these explicitly avoid recreating env if your shell is set to a different version
use_develop = true
commands =
  sphinx-build -b html docs docs/_build/html
"""
